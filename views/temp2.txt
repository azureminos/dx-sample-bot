/**
 * Copyright 2017-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

// ===== DB ====================================================================
import Users from '../models/users';
import Packages from '../models/users';
import PackageParticipant from '../models/package-instance-participant';

// ===== MESSENGER =============================================================
import userApi from '../messenger-api-helpers/user';
import sendApi from '../messenger-api-helpers/send';

// Find or Create a new/existing User with the given id.
const getUser = (senderId) => {
  return Users.findOrCreate({
    fb_id: senderId, // eslint-disable-line camelcase
  });
};

// Promise wrapper for Facebook UserApi.
const getUserDetails = (senderId) => {
  return new Promise((resolve, reject) => {
    userApi.getDetails(senderId, (err, {statusCode}, body) => {
      if (err) {
        return reject(err);
      } else if (statusCode !== 200) {
        return reject({
          statusCode,
          message: 'Unable to fetch user data for user',
          senderId,
        });
      }

      return resolve({
        name: body.first_name || body.last_name || senderId,
        profilePic: body.profile_pic,
        fbId: senderId,
      });
    });
  });
};

const getFacebookProfileInfoForUsers = (users = [], listId, socketUsers) =>
  Promise.all(users.map((user) => getUserDetails(user.fbId)))
    .then((res) => res.map((resUser = {}) => {
      // Detect online status via socketUser with matching list & FB IDs.
      const isOnline = [...socketUsers.values()].find((socketUser) =>
        socketUser.listId === instId && socketUser.userId === resUser.fbId);

      return Object.assign({}, resUser, {online: !!isOnline || false});
    }));

// Join Room, Update Necessary List Info, Notify All Users in room of changes.
const join = ({
  request: {senderId, instId},
  allInRoom,
  sendStatus,
  socket,
  socketUsers,
  userSocket,
}) => {
  if(instId) {
    Promise.all([
      PackageInst.delPackageInstance(instId),
      PackageInst.getAttractionsByInstId(instId),
      PackageInst.getParticipants(instId),
      getUser(senderId),
    ]).then(([packageInst, cityAttractions, participants, user]) => {
      if (!packageInst) {
        console.error("Package instance doesn't exist!");
        sendStatus('noPackageInst');
      }
      console.log('>>>>Print package instance before addUser', list);
      if(!participants) {
        //Add user into participant list with owner flag TRUE

        //Set user to instItem.created_by

      } else if(!participants.find((fbUser) => fbUser.fbId === user.fbId)) {
        //Add user into participant list with owner flag FALSE

      } else {
        //User already registered as participant
        socket.join(list.id);
        socket.in(list.id).emit('user:join', true);

        userSocket.emit('init', {
          packageInst,
          cityAttractions,
          users: participants,
          ownerId: listOwner ? listOwner.fbId : user.fbId,
        });
      }

      //PackageParticipant.addPackageParticipant(packageInst, user.fbId, instOwner.fbId==user.fbId)
        .then((usersList) => {
          if (!listOwner) {
            allInRoom(list.id).emit('list:setOwnerId', usersList.userFbId);
          }
        })
        .then(() => {
          socketUsers.set(socket.id, {instId: packageInst.id, userId: user.fbId});

          Lists.getAllUsers(instId)
            .then((users) => {
              return getFacebookProfileInfoForUsers(users, instId, socketUsers);
            })
            .then((fbUsers) => {
              const viewerUser =
                fbUsers.find((fbUser) => fbUser.fbId === user.fbId);
              socket.join(list.id);
              socket.in(list.id).emit('user:join', viewerUser);

              userSocket.emit('init', {
                ...list,
                items,
                users: fbUsers,
                ownerId: listOwner ? listOwner.fbId : user.fbId,
              });

              sendStatus('ok');
            });
        });
    });
  } else {
    Packages
      .getAllPromotedPackage()
      .then((packages) => {
        if (!packages) {
          console.error("No package available!");
          sendStatus('noPackage');
        } else {
          console.log('>>>>Print all packages', packages);
            userSocket.emit('init', {
              packages,
            });
            sendStatus('ok');
        }
      });
  }
}


/*{
  Promise.all([
    Lists.get(instId),
    Lists.getAllItems(instId),
    Lists.getOwner(instId),
    getUser(senderId),
  ]).then(([list, items, listOwner, user]) => {
    if (!list) {
      console.error("List doesn't exist!");
      sendStatus('noList');
    }
    console.log('>>>>Print list before addUser', list);
    Lists.addUser(list.id, user.fbId)
      .then((usersList) => {
        if (!listOwner) {
          //Promos.get(list.promoId).then((promo) => {sendApi.sendListCreated(user.fbId, list.id, list.title, promo);})
          allInRoom(list.id).emit('list:setOwnerId', usersList.userFbId);
        }
      })
      .then(() => {
        socketUsers.set(socket.id, {instId: list.id, userId: user.fbId});

        Lists.getAllUsers(instId)
          .then((users) => {
            return getFacebookProfileInfoForUsers(users, instId, socketUsers);
          })
          .then((fbUsers) => {
            const viewerUser =
              fbUsers.find((fbUser) => fbUser.fbId === user.fbId);
            socket.join(list.id);
            socket.in(list.id).emit('user:join', viewerUser);

            userSocket.emit('init', {
              ...list,
              items,
              users: fbUsers,
              ownerId: listOwner ? listOwner.fbId : user.fbId,
            });

            sendStatus('ok');
          });
      });
  });
};*/

// Notify users in room when user leaves.
const leave = ({userId, instId, allInRoom, socket, socketUsers}) => {
  if (!userId) {
    console.error('User not registered to socket');
    return;
  }

  socketUsers.delete(socket.id);

  // Detect online status via socketUser with matching list & FB IDs.
  const onlineUsers =
    [...socketUsers.values()].reduce((onlineUsers, socketUser) => (
      (socketUser.instId === instId)
        ? [...onlineUsers, socketUser.userId]
        : onlineUsers
  ), []);

  allInRoom(instId).emit('users:setOnline', onlineUsers);
};

export default {join, leave};
